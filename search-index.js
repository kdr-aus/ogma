var searchIndex = JSON.parse('{\
"ogma":{"doc":"Table expression system.","t":[2,0,0,0,0,0,0,4,13,3,13,13,13,13,13,3,13,13,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,12,11,11,11,11,11,11,11,12,12,11,11,12,11,12,11,5,12,11,11,11,11,11,11,11,11,11,3,3,3,3,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,13,13,13,3,3,13,13,13,13,13,3,13,13,13,13,13,13,3,4,4,11,11,10,11,0,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,0,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,13,4,6,3,3,3,3,13,3,3,13,13,8,13,4,13,13,4,3,3,13,13,3,13,13,13,13,3,3,4,6,4,13,3,12,11,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,11,12,12,12,12,10,11,11,12,12,12,10,11,11,12,12,12,12,12,12,10,11,11,11,12,12,12,12,11,11,11,11,12,10,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,3,13,13,13,3,18,13,3,13,3,18,13,13,18,6,4,13,4,13,18,18,18,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,5,5,0,5,5,3,3,3,6,13,13,13,13,13,13,4,4,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,5,5,5,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11],"n":["Error","common","eng","lang","output","rt","err","Category","Definitions","Error","Evaluation","Help","Internal","Parsing","Semantics","Trace","Type","UnknownCommand","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cat","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","desc","desc","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_tag","hard","help_as_error","help_msg","init","init","init","into","into","into","is_inference_depth_error","len","loc","print","provide","source","span_arg","start","to_string","trace","traces","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Block","Chgs","Compiler","FullCompilation","Func","Step","_write_debug_report","ag","apply_graph_chgs","args_len","assert_adds_vars","assert_input","assert_output","assert_vars_added","blk_tag","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compile","compile_block","compiler","create_var_ref","def","default","defs","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","env","eval","eval_o","eval_stack","fmt","from","from","from","from","from","get_flag","in_ty","in_ty","infer_inputs_block","infer_inputs_expr","infer_outputs","init","init","init","init","init","inject_manual_var_into_arg_locals","inject_manual_var_next_arg","insert_anon_type_into_compiler","insert_available_def_locals","into","into","into","into","into","invoke","next_arg","oblige_args_supplied_tys","op_tag","output_ty","peek_last_arg_node","peek_next_arg_node","resolve_tg","tg","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AsType","Bool","Bool","Def","Definitions","ImplEntry","Nil","Nil","Num","Num","Ogma","OgmaData","Str","Str","Tab","Tab","TabRow","TabRow","Table","Type","Value","add_from_file","add_from_str","as_type","as_type","ast","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cat","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","construct_def_table","data","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt_annotation","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","hash","help","help","impl_","impls","init","init","init","init","init","init","into","into","into","into","into","into","into_kserd","is_tuple","make_mut","make_mut","name","new","new","parse","process_definition","recognise_definition","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","types","variant_idx","variant_idx","Arg","Argument","Block","BlockParts","DefinitionImpl","DefinitionType","DotOperatorBlock","Expr","Expression","Field","File","Flag","IBlock","Ident","Location","Num","Ogma","Op","Parameter","Path","Path","Pound","PrefixBlock","Product","Shell","Single","Sum","Tag","Tag_","Term","Terms","TypeVariant","Var","Variant","anchor","as_ref","block_tag","block_tag","block_tag","blocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","component","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","expr","fields","file","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","ident","in_ty","in_ty","in_ty","in_ty","in_ty","in_ty","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_last","is_op","last","len","lhs","line","line","loc","loc","make_mut","name","name","name","name","op","op","op","op","op","op","out_ty","out_ty","out_ty","out_ty","out_ty","out_ty","out_ty","params","params","parts","parts","parts","range","rhs","src","src","start","str","tag","tag","tag","tag","terms","terms","terms","terms","terms","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","Directive","Expecting","Export","Expr","FailFast","File","IMPL","Impl","Import","Import","Item","NONE","NoParallelise","None","PATH","ParseFail","ParseSuccess","Plugins","Prefix","Root","SPECLITERAL","TERM","TYPE","Ty","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","code","complement","contains","definition_impl","definition_type","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","difference","directives","doc","doc","drop","drop","drop","drop","drop","drop","drop","empty","empty","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","expression","exprs","extend","file","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","glob","hash","impls","init","init","init","init","init","init","init","insert","intersection","intersects","into","into","into","into","into","into","into","is_all","is_empty","iter_imports","line","not","parse","partial_cmp","path","prefix","remove","set","sub","sub_assign","symmetric_difference","tag","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","types","union","print_error","print_ogma_data","print_table","bat","handle_help","process_expression","Batch","BatchItem","BatchItemProgress","BatchProgress","Cancelled","Cancelled","Expr","Failed","Failed","Impl","ItemType","Outcome","OutcomeProgress","Outstanding","Outstanding","Success","Success","Type","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","code","comment","comment","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","fail_fast","file","file","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","init","init","init","init","into","into","into","into","into","into","items","line","line","parallelise","parse_file","parse_str","process","serialize","serialize","serialize","status","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["ogma","","","","","","ogma::common","ogma::common::err","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ogma::eng","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ogma::lang","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ogma::lang::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ogma::lang::parseogma::output","","","ogma::rt","","","ogma::rt::bat","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Crate common items.","Compilation and evaluation engine.","Language characteristics.","Output handling, primarily about printing to terminal.","Runtime items.","Error infrastructure.","Error categories.","A definition error.","Ubiquitous error.","A run-time evaluation error.","A help message (built atop the error infrastructure).","Internal error. These should not occur.","Parsing error.","Semantic error at comp-time.","A single trace item for error messages.","Type inference failure.","Command is not recognised.","","","","","","","Category of error.","","","","","","","","","","Error description.","Description of trace.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Build the error trace from a tag.","Error should propagate immediately.","Represent a help message using the <code>Error</code> infrastructure.","Optional help message.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is this error because of reaching inference depth?","Length of trace element.","The defined location.","Pretty print the error.","","The source code.","Convert <code>Argument</code> to <code>(Tag, &amp;str)</code> for use with …","Starting position in <code>source</code>.","","Create a single trace item using the tag.","Error backtrace.","","","","","","","","","","A compilation unit for a single <code>ast::Block</code>.","Compiler changes to apply.","Ogma expression compiler.","Successful compilation structure.","Common function signature for evaluation, taking a <code>Value</code> …","A compiled block, ready for evaluation.","Debug compiler state.","A <code>AstGraph</code> reference.","Returns if any of the graphs were altered when applying …","Returns the <em>number of arguments remaining</em>.","Assert that this operation will be adding variables.","Assert the block as the given input type, constructing an …","Assert that this block will return the given type.","Asserts that all the variables have been added, allowing …","The entire block tag.","","","","","","","","","","","","","","","Compile an expression.","Try to compile <code>opnode</code> into an evaluation <code>Step</code> given the …","A <code>Compiler</code> reference.","Assert this argument is a variable and construct a …","Build a step for a definition.","","The current definitions being compiled with.","","","","","","","","","","","","","","","","The seeding locals environment.","Most flexible evaluation option, but also most brittle.","Preferred way of creating a eval step.","Compiled evaluation stack, which can be evaluated.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the flag that matches a given name.","The input <code>Type</code> of the block.","The block’s input type.","Infer inputs into <em>blocks</em>.","Infer inputs into <em>expressions</em>.","Infer the outputs with the current compiler state.","","","","","","Create a variable reference not off a specific argument, …","Helper for <code>Block::inject_manual_var_into_arg_locals</code> which …","Inserts a new, anonymous type into the compiler.","Insert the locals for a definition into the <code>callsite_params</code>…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Evaluate this step, invoking the stored closure with the …","Get the <code>Block</code>’s next argument.","Oblige the <strong>remaining</strong> arguments to have the input type <code>ty</code>.","The operation (command) tag.","Looks into the TG and fetches if this block’s output …","See if there is a final argument node, without popping off …","See if there is a next argument node, without popping off …","Resolve the type graph.","A <code>TypeGraph</code> reference.","","","","","","","","","","","","","","","","","","This Rust type represents an ogma type.","A boolean type.","Boolean value.","An ogma-defined type.","The working set of <code>ogma</code> definitions.","An implementation entry.","A nil, or nothing, type.","Nothing value.","A numeric type.","Number value.","User defined data value.","A non-primitive data structure.","A string type.","String value.","A table type.","Table value.","A table row type.","Table row.","Wrapper of a table, used to specialise drop and cloning …","Ogma data types.","The value of an evaluation.","Add definitions by reading a file.","Add definitions from a string.","The ogma type.","","AST representation.","","","","","","","","","","","","","Command category.","Clears user-defined commands. If <code>only_files</code> is <code>true</code>, shell …","","","","","","","","","","","Construct a table comprising of the various definitions in …","The backing data field values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Display this type for type annotation.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","If this table reference is unique, get a mutable alias to …","Get a mutable reference to the inner data.","","Output the help message of a type.","Command help.","The implementation.","Provide access to the defined implementations.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","This type is a Tuple type with name <code>U_t1-t2-...-tN_</code>.","Make a unique reference to this table by cloning if …","Make a mutable reference to the inner data by …","The command/op name.","Create the new, base set of definitions.","Build a new <code>OgmaData</code>.","Parsing source into a AST.","Process an expression which defines a <em>definition</em>.","Recognise a string which defines an implementation or type.","","","","","","","","","","","","","","","","","","","","","","Get the runtime type.","The type definition for this type.","The input type this is keyed on.","","","","","","","Provide access to the defined types.","Returns the variant index <strong>IF</strong> the value is a user-defined …","The variant index for a Sum type.","An argument term.","An argument kind.","A single expression block. An expression is made of …","The concrete parts of a block.","A implementation definition.","A type definition.","Dot operator has terms that are <code>[lhs,rhs]</code>.","Recognised as an expression.","An expression. An expression is made of multiple blocks …","A product type field.","Defined in a file. <code>(filepath, line)</code>.","A flag.","The common aspects of a processing block.","Recognised as just an identifier.","A location indicator.","Recognised as a number.","Defined within <code>ogma</code>’s core.","The parsed operation, represented as a single tag or a …","A implementation definition’s parameters.","A partition <em>path</em>, terminating in a command.","Consists of a path.","Recognised as a special literal (such as <code>#t</code> for true).","Polish notation block: <code>op term1 term2</code>.","A ‘product’ type, a type composed of fields.","Defined in the current sessions shell.","Consisting of a single tag.","A ‘sum’ type, a type composed of mutually exclusive …","<code>Tag</code> only implements tag <em>value</em> equality checking (as in …","Inner tag.","A expression block term: <code>bar</code> in <code>foo bar</code>.","List of terms.","Types are either <code>Sum</code> (enum) or <code>Product</code> (struct).","Recognised as a variable reference.","A sum type variant.","The location this tag is referencing.","","Create a tag that extends across the whole block.","","","The comprising blocks.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait-object safe clone.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the current component tag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The end byte position (exclusive).","","","","","","","","","","","","","","","","","","","","","","","","","","The implementation’s evaluation expression.","Optional inner fields","Construct a location from a file and a line number.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The name ident of the parameter.","An optional annotated input type constraint.","","","Optional annotated input type.","An optional annotated input type constraint.","An optional input type.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns if this path is on the <em>last</em> component.","Returns <code>Some</code> if the op is a singleton, or if path is on …","Return the last component of the path, which is the …","The byte length of the tag (<code>end - start</code>).","The left hand side argument.","The source line.","The source line this tag slices.","The location where this impl is defined.","The location where this type is defined.","COW the inner tag.","The name ident of the impl.","The name ident of the type.","The name ident.","The name ident.","The operation.","","","The operation.","The command/implementation name ident.","The op tag (<code>.</code>).","An optional annotated output type constraint.","","","Optional annotated output type.","An optionally annotated output type constraint.","An optional annotated output type constraint.","An optional annotated output type constraint.","The implementation’s required parameters.","Type parameterisation: Ty","The common aspects of a block: the operation tag and a …","","","Treat this tag as a range.","For the dot infix operator, the rhs is <em>always</em> a plain …","The source code.","The source code.","The start byte position (inclusive).","The string slice of this tag.","Get the tag which represents the argument.","Returns the tag from <em>the current component to the end</em> of …","Returns a tag which covers the whole defined op.","The overall tag of the expression.","The terms.","","","The terms.","The terms.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Optional type specifier, eg <code>x:Num</code>. This is used to label …","The type’s flavour (and structure).","The field type.","","","","","","","","","","","","","","","","","","Union <code>self</code> and <code>b</code> together, extending the tag.","File directives.","An indication of expected AST node type if parsing fails.","Export items.","Parsed as an expression.","Stop processing if an expression fails.","File constituents.","Expecting a command/implementation.","Parsed as a <code>def</code>inition.","Import path.","Import items.","An item contains code and an optional documentation string.","Unable to provide an AST expectation.","Evaluate expressions in order.","No prefix.","Expecting a path.","Failure to parse results in the parse <code>Error</code>, and an …","Successful parse result.","From the plugins folder.","Import prefix.","From the root.","Expecting a Special Literal.","Expecting a term (the <code>bar</code> in <code>foo bar</code>).","Expecting a type.","Parsed as a type definition (<code>def-ty</code>).","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Code, including the keywords for types and impls.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Parse a definition implementation (<code>def</code>).","Parse a definition type (<code>def-ty</code>).","","","","","","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Any <code>Directive</code>s.","A document string.","Documentation string.","","","","","","","","Creates an empty file.","Returns an empty set of flags.","","","","","","","","","","","Parse an expression.","All expressions <em>in definition order</em>.","","Parse a complete file to return the <em>item pointers</em> and …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","The items glob pattern.","","All implementation definitions.","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Iterate over the import directives.","The line number of this item.","Returns the complement of this set of flags.","Parse the <code>input</code> as a valid <code>ogma</code> expression or definition.","","The leading partition path.","The prefix location.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Create a tag that spans across the <em>whole import</em>.","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","All type definitions.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Prints the processing error. Uses colour and assumes …","Serialises <code>OgmaData</code> into <code>::kserd::Kserd</code> and the formats it …","Print the <code>Table</code> as a text formatted table to the given …","Batch processing of definitions and expressions.","Check if an expression has a help flag and output the help …","Parse and evaluate an <code>expr</code>, returning the value if …","A batch to process.","An item to process.","Serialisable progress of a <code>BatchItem</code>.","Serialisable progress of a <code>Batch</code>.","Processing was cancelled before the item could be …","Matches <code>Outcome::Cancelled</code>.","An expression.","The item failed parsing, checking, or evaluating.","Matches <code>Outcome::Failed</code>.","An implementation definition.","The type of this item.","The outcome of an item.","The serialisable version of <code>Outcome</code>.","The item was yet to be processed.","Matches <code>Outcome::Outstanding</code>.","The item parsed, checked, and evaluated successfully.","Matches <code>Outcome::Success</code>.","A type definition.","","","","","","","","","","","","","","","Return the expression or definition code.","A description of the item.","Matches <code>BatchItem::comment</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Stop processing upon encountering an error in one of the …","The file where this item was defined (used for error …","Matches <code>BatchItem::file</code>.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The items in the batch to process.","The line where this item was defined (used for error …","Matches <code>BatchItem::line</code>.","Process the <em>expressions</em> in a parallel fashion.","Parse the contents of a file into a list of <code>BatchItem</code>s.","Parse a string of items.","Process a <code>Batch</code>.","","","","The status of the item.","","","","","","","","","","","","","","The type this item was recognised as.","Matches <code>BatchItem::ty</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,0,3,0,3,3,3,3,3,0,3,3,1,2,3,1,2,3,1,1,2,3,1,2,3,1,2,3,1,2,1,2,3,1,2,3,1,2,3,1,1,2,3,1,2,3,2,1,0,1,1,2,3,1,2,3,1,2,2,1,1,2,1,2,1,0,1,1,2,3,1,2,3,1,2,3,0,0,0,0,0,0,20,20,20,23,23,23,23,23,23,27,23,24,20,28,27,23,24,20,28,24,20,24,20,0,20,23,23,24,28,23,27,23,24,20,28,27,23,24,20,28,27,23,24,20,28,27,23,23,27,24,27,23,24,20,28,23,23,23,20,20,20,27,23,24,20,28,23,23,23,20,27,23,24,20,28,24,23,23,23,23,23,23,20,20,24,20,27,23,24,20,28,27,23,24,20,28,27,23,24,20,28,0,12,31,12,0,0,12,31,12,31,31,0,12,31,12,31,12,31,0,0,0,26,26,79,32,0,80,26,32,12,31,33,80,26,32,12,31,33,80,26,26,32,12,31,33,26,32,12,31,33,0,33,26,32,80,26,32,32,12,31,33,80,26,32,12,31,33,80,26,32,32,12,31,33,32,12,31,33,12,32,12,12,31,33,12,80,26,32,32,12,31,31,31,31,31,31,31,31,31,33,32,33,12,12,80,80,26,80,26,32,12,31,33,80,26,32,12,31,33,33,12,32,33,80,26,33,0,0,0,26,32,12,31,33,12,80,26,32,32,32,12,31,33,33,80,26,32,12,31,33,31,33,80,80,26,32,12,31,33,26,31,33,47,0,0,0,0,0,0,16,0,0,42,47,0,16,0,16,42,0,0,0,51,16,0,53,42,51,53,0,0,0,0,0,16,0,46,8,57,43,44,25,59,8,46,42,25,43,44,47,16,48,49,52,53,54,55,50,51,59,8,46,42,25,43,44,47,16,48,49,52,53,54,55,50,51,57,8,46,42,25,43,43,44,44,47,16,48,49,50,51,8,46,42,25,43,44,47,16,48,49,50,51,50,8,42,59,8,8,46,42,25,43,44,47,16,48,49,52,53,54,55,50,51,59,8,46,42,25,43,44,47,16,48,49,52,53,54,55,50,51,59,8,46,42,25,43,44,47,16,48,49,52,53,54,55,50,51,46,8,8,42,25,43,44,47,16,48,49,52,53,54,55,50,51,8,42,48,52,53,54,55,50,51,49,54,42,8,8,42,42,25,43,44,47,16,48,49,52,53,54,55,50,51,59,45,8,8,46,42,25,43,44,47,16,48,49,52,53,54,55,50,51,48,57,43,44,59,43,49,59,8,46,42,25,43,44,47,16,48,49,52,53,54,55,50,51,59,8,46,42,25,43,44,47,16,48,49,52,53,54,55,50,51,50,51,50,8,44,8,46,49,52,8,49,52,54,55,57,43,44,59,43,44,57,43,44,59,25,43,44,49,55,57,43,44,8,44,49,52,46,8,16,50,51,25,57,43,44,59,43,8,46,42,25,43,44,47,16,48,49,50,51,8,42,59,8,46,42,25,43,44,47,16,48,49,52,53,54,55,50,51,59,8,46,42,25,43,44,47,16,48,49,52,53,54,55,50,51,48,52,55,59,8,46,42,25,43,44,47,16,48,49,52,53,54,55,50,51,8,0,0,64,71,64,0,61,71,0,64,0,61,64,67,61,0,0,67,0,67,61,61,61,71,61,61,61,61,61,61,61,61,71,63,64,65,66,67,61,71,63,64,65,66,67,61,63,64,65,66,67,61,63,64,65,66,67,61,61,65,61,61,0,0,71,63,64,65,66,67,61,71,63,64,65,66,67,61,61,63,63,65,71,63,64,65,66,67,61,63,61,64,65,66,67,61,64,65,66,67,61,0,63,61,0,63,64,65,66,67,61,61,61,61,61,71,63,64,65,66,67,61,61,61,61,61,66,61,63,71,63,64,65,66,67,61,61,61,61,71,63,64,65,66,67,61,61,61,63,65,61,0,61,66,66,61,61,61,61,61,66,63,64,65,66,67,61,61,71,63,64,65,66,67,61,71,63,64,65,66,67,61,71,63,64,65,66,67,61,63,61,0,0,0,0,0,0,0,0,0,0,76,75,72,76,75,72,0,0,0,76,75,76,75,72,77,73,76,72,74,75,77,73,76,72,74,75,72,72,73,73,74,77,73,76,72,74,75,77,73,76,72,74,75,72,74,75,77,73,76,72,74,75,73,76,72,73,76,72,77,73,74,73,76,72,77,73,76,76,72,74,75,75,77,73,76,72,74,75,77,73,76,72,74,75,77,73,74,77,0,0,0,72,74,75,74,72,77,73,76,72,74,75,77,73,76,72,74,75,73,74,77,73,76,72,74,75],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[],1],[[],2],[[],3],[4],[4],[4],[4],[4],[4],0,0,[4],[4],[4],[[1,1],5],[[2,2],5],[[3,3],5],[[],5],[[],5],[[],5],[[1,6],7],[[1,6],7],[[2,6],7],[[3,6],7],[[]],[[]],[[]],[[8,[11,[[10,[9]]]]],2],0,0,0,[[],4],[[],4],[[],4],[[]],[[]],[[]],[1,5],0,0,[[1,5,13],14],[15],0,[16],0,[[],9],[[8,[11,[[10,[9]]]]],[[17,[2]]]],0,[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],0,0,0,0,0,0,[[20,[22,[21]]]],0,[20,[[18,[5,1]]]],[23,4],[[23,5]],[[23,12],[[18,[1]]]],[[23,12]],[23],[23,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,24],[20,20],[[]],[[]],[[25,26],[[18,[27,1]]]],0,[23,20],0,0,[[],28],[23,26],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],0,[[23,12],[[18,[24,1]]]],[23,[[18,[24,1]]]],0,[[24,6],7],[[]],[[]],[[]],[[]],[[]],[[23,[11,[[10,[29]]]]],[[10,[8]]]],[23,12],0,[30,[[18,[5,1]]]],[30,[[18,[5,1]]]],[30,[[18,[5,1]]]],[[],4],[[],4],[[],4],[[],4],[[],4],0,[[23,12],[[18,[0,1]]]],[[23,12]],[20,[[18,[5,1]]]],[[]],[[]],[[]],[[]],[[]],0,[23,[[18,[[30,[0]],1]]]],[[23,[11,[[10,[12]]]]]],[23,8],[23,[[10,[12]]]],[23,[[10,[0]]]],[23,[[10,[0]]]],[20,[[18,[1]]]],0,[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[26,[22,[21]]],[[18,[4,1]]]],[[26,29,21],[[18,[4,1]]]],[[],12],[[],12],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[26,5]],[26,26],[32,32],[12,12],[31,31],[33,33],[[]],[[]],[[]],[[]],[[]],[26,32],[33],[[],26],[[],32],[4],[4],[4],[32,34],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[32],[4],[4],[4],[[32,32],5],[[12,12],5],[[31,31],5],[[33,33],5],[[],5],[[32,6],7],[[12,6],7],[[12,6],7],[[31,6],7],[[33,6],7],0,[[]],[[]],[[[34,[31]]],32],[[]],[[]],[35,31],[36,31],[33,31],[[]],[37,31],[32,31],[[],31],[5,31],[38,31],[[]],[32,[[10,[34]]]],[33,[[10,[0]]]],[12],0,0,0,0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[33,[[18,[39,40]]]],[12,5],[32,34],0,0,[[],26],[[[41,[0]],[17,[31]]],33],0,[[29,42,[10,[9]],26],[[18,[1]]]],[29,5],[[]],[[]],[[]],[[]],[[]],[[],9],[[],18],[[],18],[[],18],[31,[[18,[32,1]]]],[31,[[18,[32,1]]]],[[],18],[[],18],[[],18],[31,[[18,[33,1]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[31,12],[33,41],0,[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,[31,[[10,[4]]]],[33,4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[8,29],[[],8],[43,8],[44,8],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],45],[8,8],[46,46],[42,42],[25,25],[43,45],[43,43],[44,45],[44,44],[47,47],[16,16],[48,48],[49,49],[50,50],[51,51],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[50,8],[[],8],[[],42],[4],[4],[8,46],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],0,[[8,29],5],[[8,8],5],[[42,42],5],[[25,25],5],[[43,43],5],[[44,44],5],[[47,47],5],[[16,16],5],[[48,48],5],[[49,49],5],[[52,52],5],[[53,53],5],[[54,54],5],[[55,55],5],[[50,50],5],[[51,51],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[[[22,[21]],56],42],[[8,6],7],[[8,6],7],[[42,6],7],[[42,6],7],[[25,6],7],[[43,6],7],[[44,6],7],[[47,6],7],[[16,6],7],[[48,6],7],[[49,6],7],[[52,6],7],[[53,6],7],[[54,6],7],[[55,6],7],[[50,6],7],[[51,6],7],[[]],[57,45],[[]],[46,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],[[10,[[58,[8]]]]]],[43,[[10,[[58,[8]]]]]],[44,[[10,[[58,[8]]]]]],0,0,0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[50,5],[51,[[10,[8]]]],[50,8],[8,4],0,[8,29],0,0,0,[8,46],0,0,0,0,[[],[[58,[8]]]],[43,[[58,[8]]]],[44,[[58,[8]]]],0,0,0,[[],[[10,[[58,[8]]]]]],[43,[[10,[[58,[8]]]]]],[44,[[10,[[58,[8]]]]]],0,0,0,0,0,0,[30,59],[[[30,[43]]],59],[[[30,[44]]],59],[8,[[60,[4]]]],0,0,0,0,[8,29],[16,8],[50,[[58,[8]]]],[51,[[58,[8]]]],0,[[],58],[43,58],[44,58],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,0,0,[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[8,8],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],61],[[61,61],61],[[61,61]],[[61,61],61],[[61,61]],[61,62],[[61,61],61],[[61,61]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[63,63],[64,64],[65,65],[66,66],[67,67],[61,61],[[]],[[]],[[]],[[]],[[]],[[]],[[61,61],35],0,[61,61],[[61,61],5],[[[11,[[41,[29]]]],42,26],[[18,[49,68]]]],[[[11,[[41,[29]]]],42],[[18,[52,68]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[61,61],61],0,0,0,[4],[4],[4],[4],[4],[4],[4],[[],63],[[],61],[[64,64],5],[[65,65],5],[[66,66],5],[[67,67],5],[[61,61],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[11,[[41,[29]]]],42,26],[[18,[25,68]]]],0,[[61,69]],[[29,42],[[18,[63,1]]]],[[63,6],7],[[64,6],7],[[65,6],7],[[66,6],7],[[67,6],7],[[61,6],7],[[61,6],7],[[61,6],7],[[61,6],7],[[61,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[62,[[10,[61]]]],[62,61],[62,61],[69,61],0,[61],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[61,61]],[[61,61],61],[[61,61],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[61,5],[61,5],[63,70],0,[61,61],[[29,26],[[18,[71,68]]]],[[61,61],[[10,[35]]]],0,0,[[61,61]],[[61,61,5]],[[61,61],61],[[61,61]],[[61,61],61],[66,8],[[]],[[]],[[]],[[]],[[]],[[]],[[61,61]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,[[61,61],61],[[1,13],14],[33,9],[[32,13],14],0,[[25,26],[[18,[1]]]],[[42,26,21,21],[[18,[31,1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[72,72],[[]],[73,29],0,0,[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[18,[72]]]],[[],[[18,[74]]]],[[],[[18,[75]]]],[4],[4],[4],[4],[4],[4],[[73,73],5],[[76,76],5],[[72,72],5],[[],5],[[],5],[[],5],0,0,0,[[73,6],7],[[76,6],7],[[72,6],7],[[]],[[]],[[]],[[[18,[1]]],76],[[]],[[]],[76,75],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[[22,[21]]],[[14,[[18,[77,1]]]]]],[[29,42],[[18,[77,1]]]],[[77,21,21,78,26],17],[72,18],[74,18],[75,18],0,[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[73,72],0,[[],19],[[],19],[[],19],[[],19],[[],19],[[],19]],"p":[[3,"Error"],[3,"Trace"],[4,"Category"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Tag"],[3,"String"],[4,"Option"],[8,"Into"],[4,"Type"],[8,"Write"],[6,"Result"],[3,"Demand"],[4,"Argument"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[3,"Compiler"],[3,"Path"],[8,"AsRef"],[3,"Block"],[3,"Step"],[3,"Expression"],[3,"Definitions"],[3,"FullCompilation"],[3,"Chgs"],[15,"str"],[3,"Box"],[4,"Value"],[3,"Table"],[3,"OgmaData"],[3,"Table"],[4,"Ordering"],[4,"Number"],[4,"Entry"],[3,"Str"],[3,"Kserd"],[4,"ToKserdErr"],[3,"Arc"],[4,"Location"],[3,"PrefixBlock"],[3,"DotOperatorBlock"],[6,"Block"],[3,"Tag_"],[4,"Term"],[3,"Parameter"],[3,"DefinitionImpl"],[3,"Path"],[4,"Op"],[3,"DefinitionType"],[4,"TypeVariant"],[3,"Variant"],[3,"Field"],[15,"u16"],[8,"IBlock"],[4,"Cow"],[3,"BlockParts"],[3,"Range"],[3,"Expecting"],[15,"u32"],[3,"File"],[4,"Directive"],[3,"Item"],[3,"Import"],[4,"Prefix"],[6,"ParseFail"],[8,"IntoIterator"],[8,"Iterator"],[4,"ParseSuccess"],[4,"ItemType"],[3,"BatchItem"],[3,"BatchItemProgress"],[4,"OutcomeProgress"],[4,"Outcome"],[3,"Batch"],[3,"ProgressTx"],[8,"AsType"],[3,"ImplEntry"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
